name: CI

on:
  push:
    branches:
      - master

jobs:
  Build:
    name: instance-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Generate Version Number
        id: version
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          VERSION="v${TIMESTAMP}_${RANDOM}"
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV  # Set environment variable
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT  # Set job output

      - name: Build the Docker Image
        env:
          image_name: test-image
          username: dapper01
          APP_VERSION: ${{ steps.version.outputs.app_version }}  
        run: |
          docker build -t $username/$image_name:${{ env.APP_VERSION }} .
          docker save -o test-image_${{ env.APP_VERSION }}.tar $username/$image_name:${{ env.APP_VERSION }}

      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: test-image_${{ env.APP_VERSION }}.tar

    outputs:
      app_version: ${{ steps.version.outputs.app_version }}

  Deploy:
    name: Deploy Docker Image
    runs-on: self-hosted
    needs: Build
    env:
      username: dapper01
      image_name: test-image
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Verify Artifact Download
        run: |
          ls -al
          if [ -f "test-image_${{ needs.Build.outputs.app_version }}.tar" ]; then
            echo "Artifact found"
          else
            echo "Artifact not found"
            exit 1
          fi

      - name: Load Docker Image
        run: |
          docker load -i test-image_${{ needs.Build.outputs.app_version }}.tar

      - name: Verify Loaded Docker Image
        run: |
          docker images

      - name: Print Image Detail
        run: |
          echo "username: $username"
          echo "image_name: $image_name"
          echo "app_version: ${{ needs.Build.outputs.app_version }}"

      - name: Stop Containers Using Port 8082 (if any)
        run: |
          CONTAINER_ID=$(docker ps --filter "publish=8082" -q)
          if [ -n "$CONTAINER_ID" ]; then
            echo "Stopping container $CONTAINER_ID"
            docker stop $CONTAINER_ID
          else
            echo "No container found using port 8082"
          fi

      - name: Run Docker Containers
        run: |
          echo "Running container with image: $username/$image_name:${{ needs.Build.outputs.app_version }}"
          docker run -d -p 8082:3000 $username/$image_name:${{ needs.Build.outputs.app_version }}

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: oladapper@gmail.com
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Docker Image Deployed from Artifact"
          to: "oladapolawal12@yahoo.com"
          from: "Mr David Agba DevOps"
          body: |
            Hello,
            The latest version of the Docker image (version: ${{ needs.Build.outputs.app_version }}) has been deployed from the artifact.
